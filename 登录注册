import tkinter as tk

class UserRegistrationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("用户登录")

        # 创建登录界面的元素
        self.label_id = tk.Label(root, text="学号/工号:")
        self.label_id.pack()
        self.entry_id = tk.Entry(root)
        self.entry_id.pack()

        self.label_password = tk.Label(root, text="密码:")
        self.label_password.pack()
        self.entry_password = tk.Entry(root, show="*")
        self.entry_password.pack()

        self.login_button = tk.Button(root, text="登录", command=self.login)
        self.login_button.pack()

        self.register_button = tk.Button(root, text="注册", command=self.show_register_page)
        self.register_button.pack()

        self.forgot_password_button = tk.Button(root, text="忘记密码", command=self.show_forgot_password_page)
        self.forgot_password_button.pack()
# 假设这里是您的 login_user 函数定义
    def login_user(username, password):
        # 实现用户登录逻辑，这里只是一个示例
        if username == "admin" and password == "password":
            return True
        else:
            return False
    def login(self):
        id_number = self.entry_id.get()
        password = self.entry_password.get()
        
        # 在这里调用登录函数，假设登录函数名为login_user
        login_success = login_user(id_number, password)
        
        if login_success:
            # 登录成功的处理
            print("登录成功！")
        else:
            # 登录失败的处理
            print("登录失败，请检查您的用户名和密码。")

    def show_register_page(self):
        self.root.title("用户注册")
        
        # 清空登录界面元素
        for widget in self.root.winfo_children():
            widget.pack_forget()
        
        # 创建注册界面的元素
        self.label_name = tk.Label(self.root, text="姓名:")
        self.label_name.pack()
        self.entry_name = tk.Entry(self.root)
        self.entry_name.pack()

        self.label_id = tk.Label(self.root, text="学号/工号:")
        self.label_id.pack()
        self.entry_id = tk.Entry(self.root)
        self.entry_id.pack()

        self.label_email = tk.Label(self.root, text="学校邮箱:")
        self.label_email.pack()
        self.entry_email = tk.Entry(self.root)
        self.entry_email.pack()

        self.label_password = tk.Label(self.root, text="密码:")
        self.label_password.pack()
        self.entry_password = tk.Entry(self.root, show="*")
        self.entry_password.pack()

        self.label_confirm_password = tk.Label(self.root, text="确认密码:")
        self.label_confirm_password.pack()
        self.entry_confirm_password = tk.Entry(self.root, show="*")
        self.entry_confirm_password.pack()

        self.register_button = tk.Button(self.root, text="注册", command=self.register_user)
        self.register_button.pack()

        self.return_button = tk.Button(self.root, text="返回登录页面", command=self.show_login_page)
        self.return_button.pack()

    def show_forgot_password_page(self):
        self.root.title("忘记密码")
        # 清空登录界面元素
        for widget in self.root.winfo_children():
            widget.pack_forget()

        # 创建忘记密码界面的元素
        # 添加学号/工号/学校邮箱的输入框、重设密码的输入框
        # 创建确认按钮
        # 创建返回按钮，command绑定到 self.show_login_page 方法

    def register_user(self):
        name = self.entry_name.get()
        id_number = self.entry_id.get()
        email = self.entry_email.get()
        password = self.entry_password.get()
        confirm_password = self.entry_confirm_password.get()
        # 在这里调用注册函数

# 创建Tkinter窗口并运行应用
root = tk.Tk()
app = UserRegistrationApp(root)
root.mainloop()